version: '3.8'

services:
  # API Gateway - Entry point for all services
  api-gateway:
    build:
      context: ./backend/microservices/api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - AUTH_SERVICE_URL=http://auth-service:3001
      - GHOST_SERVICE_URL=http://ghost-service:2368
      - MAUTIC_SERVICE_URL=http://mautic-service:8000
    networks:
      - microservices-network
    depends_on:
      - auth-service
      - ghost-service
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Authentication Service
  auth-service:
    build:
      context: ../microservices/auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_HOST=database-service
      - DB_PORT=5432
      - DB_NAME=auth
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=your_secure_jwt_secret_here
      - JWT_EXPIRY=24h
    networks:
      - microservices-network
    depends_on:
      - database-service
    volumes:
      - ./backend/microservices/auth-service/logs:/usr/src/app/logs
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Database Service (PostgreSQL)
  database-service:
    image: postgres:15-alpine
    container_name: database-service
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=auth
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ghost CMS Service (SQLite instead of PostgreSQL)
  ghost-service:
    image: ghost:5-alpine
    container_name: ghost-service
    restart: unless-stopped
    environment:
      - database__client=sqlite3
      - database__connection__filename=/var/lib/ghost/content/data/ghost.db
      - url=http://localhost:2368
    networks:
      - microservices-network
    volumes:
      - ghost_content:/var/lib/ghost/content
    ports:
      - "2368:2368"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:2368/ghost/api/v3/admin/site/"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - database-service

  # Mautic Marketing Service - temporarily disabled due to image issues
  # mautic-service:
  #   image: mautic/mautic:4.4
  #   container_name: mautic-service
  #   restart: unless-stopped
  #   environment:
  #     - MAUTIC_DB_HOST=database-service
  #     - MAUTIC_DB_PORT=5432
  #     - MAUTIC_DB_NAME=mautic
  #     - MAUTIC_DB_USER=postgres
  #     - MAUTIC_DB_PASSWORD=postgres
  #     - MAUTIC_ADMIN_EMAIL=admin@example.com
  #     - MAUTIC_ADMIN_PASSWORD=mauticadmin
  #   networks:
  #     - microservices-network
  #   volumes:
  #     - mautic_files:/var/www/html
  #   ports:
  #     - "8000:80"
  #   depends_on:
  #     - database-service

  # Prometheus Monitoring (core only)
  monitoring-service:
    image: prom/prometheus:latest
    container_name: monitoring-service
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./backend/microservices/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M

  # Lightweight FileBeat for log collection
  filebeat-service:
    image: docker.elastic.co/beats/filebeat:8.6.2
    container_name: filebeat-service
    restart: unless-stopped
    user: root
    volumes:
      - ./backend/docker/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - microservices-network
    environment:
      - output.elasticsearch.hosts=["elasticsearch-lite:9200"]
    depends_on:
      - elasticsearch-lite

  # Single-node Elasticsearch (lightweight)
  elasticsearch-lite:
    image: elasticsearch:8.6.2
    container_name: elasticsearch-lite
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    networks:
      - microservices-network
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_lite_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G

  # Kibana for log visualization
  kibana-lite:
    image: kibana:8.6.2
    container_name: kibana-lite
    restart: unless-stopped
    ports:
      - "5601:5601"
    networks:
      - microservices-network
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-lite:9200
    depends_on:
      - elasticsearch-lite

networks:
  microservices-network:
    driver: bridge
    name: microservices-network

volumes:
  postgres_data:
    driver: local
  ghost_content:
    driver: local
  mautic_files:
    driver: local
  prometheus_data:
    driver: local
  elasticsearch_lite_data:
    driver: local
