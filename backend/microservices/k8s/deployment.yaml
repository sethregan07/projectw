apiVersion: v1
kind: Namespace
metadata:
  name: microservices
  labels:
    name: microservices

---
# API Gateway Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: microservices
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - name: api-gateway
        image: ${REGISTRY}/api-gateway:latest
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: AUTH_SERVICE_URL
          value: "http://auth-service:3001"
        - name: GHOST_SERVICE_URL
          value: "http://ghost-service:2368"
        - name: MAUTIC_SERVICE_URL
          value: "http://mautic-service:8000"
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "200m"
            memory: "256Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - api-gateway
              topologyKey: "kubernetes.io/hostname"

---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: microservices
spec:
  selector:
    app: api-gateway
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP

---
# Auth Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: microservices
spec:
  replicas: 2
  selector:
    matchLabels:
      app: auth-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: auth-service
    spec:
      containers:
      - name: auth-service
        image: ${REGISTRY}/auth-service:latest
        ports:
        - containerPort: 3001
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3001"
        - name: DB_HOST
          value: "database-service"
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          value: "auth_db"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: jwt-secret
              key: secret
        - name: JWT_EXPIRY
          value: "24h"
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "200m"
            memory: "256Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - auth-service
              topologyKey: "kubernetes.io/hostname"

---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: microservices
spec:
  selector:
    app: auth-service
  ports:
  - port: 3001
    targetPort: 3001
  type: ClusterIP

---
# Database Service
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: database-service
  namespace: microservices
spec:
  serviceName: "database-service"
  replicas: 1
  selector:
    matchLabels:
      app: database-service
  template:
    metadata:
      labels:
        app: database-service
    spec:
      containers:
      - name: database-service
        image: ${REGISTRY}/database-service:latest
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: password
        - name: POSTGRES_MULTIPLE_DATABASES
          value: "auth_db,ghost_db,mautic_db,analytics_db"
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
        - name: database-backup
          mountPath: /var/lib/postgresql/backup
        - name: database-archive
          mountPath: /var/lib/postgresql/archive
        resources:
          limits:
            cpu: "2"
            memory: "2Gi"
          requests:
            cpu: "1"
            memory: "1Gi"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: database-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "standard"
      resources:
        requests:
          storage: 10Gi
  - metadata:
      name: database-backup
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "standard"
      resources:
        requests:
          storage: 5Gi
  - metadata:
      name: database-archive
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "standard"
      resources:
        requests:
          storage: 5Gi

---
apiVersion: v1
kind: Service
metadata:
  name: database-service
  namespace: microservices
spec:
  selector:
    app: database-service
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Ghost Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ghost-service
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ghost-service
  template:
    metadata:
      labels:
        app: ghost-service
    spec:
      containers:
      - name: ghost-service
        image: ${REGISTRY}/ghost-service:latest
        ports:
        - containerPort: 2368
        env:
        - name: database__client
          value: "postgres"
        - name: database__connection__host
          value: "database-service"
        - name: database__connection__port
          value: "5432"
        - name: database__connection__user
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: username
        - name: database__connection__password
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: password
        - name: database__connection__database
          value: "ghost_db"
        - name: url
          value: "http://ghost-service:2368"
        volumeMounts:
        - name: ghost-content
          mountPath: /var/lib/ghost/content
        resources:
          limits:
            cpu: "1"
            memory: "1Gi"
          requests:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          httpGet:
            path: /ghost/api/v3/admin/site/
            port: 2368
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /ghost/api/v3/admin/site/
            port: 2368
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: ghost-content
        persistentVolumeClaim:
          claimName: ghost-content-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ghost-content-pvc
  namespace: microservices
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: Service
metadata:
  name: ghost-service
  namespace: microservices
spec:
  selector:
    app: ghost-service
  ports:
  - port: 2368
    targetPort: 2368
  type: ClusterIP

---
# Mautic Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mautic-service
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mautic-service
  template:
    metadata:
      labels:
        app: mautic-service
    spec:
      containers:
      - name: mautic-service
        image: ${REGISTRY}/mautic-service:latest
        ports:
        - containerPort: 8000
        env:
        - name: MAUTIC_DB_HOST
          value: "database-service"
        - name: MAUTIC_DB_PORT
          value: "5432"
        - name: MAUTIC_DB_NAME
          value: "mautic_db"
        - name: MAUTIC_DB_USER
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: username
        - name: MAUTIC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: password
        - name: MAUTIC_ADMIN_EMAIL
          value: "admin@example.com"
        - name: MAUTIC_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mautic-credentials
              key: admin-password
        volumeMounts:
        - name: mautic-data
          mountPath: /var/www/html
        resources:
          limits:
            cpu: "1"
            memory: "1Gi"
          requests:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: mautic-data
        persistentVolumeClaim:
          claimName: mautic-data-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mautic-data-pvc
  namespace: microservices
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: Service
metadata:
  name: mautic-service
  namespace: microservices
spec:
  selector:
    app: mautic-service
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: microservices-ingress
  namespace: microservices
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.example.com
    - ghost.example.com
    - mautic.example.com
    secretName: microservices-tls
  rules:
  - host: api.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-gateway
            port:
              number: 3000
  - host: ghost.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ghost-service
            port:
              number: 2368
  - host: mautic.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mautic-service
            port:
              number: 8000

---
# Secrets
apiVersion: v1
kind: Secret
metadata:
  name: db-credentials
  namespace: microservices
type: Opaque
data:
  username: cG9zdGdyZXM=  # postgres
  password: cG9zdGdyZXM=  # postgres

---
apiVersion: v1
kind: Secret
metadata:
  name: jwt-secret
  namespace: microservices
type: Opaque
data:
  secret: c3VwZXJzZWNyZXRrZXk=  # supersecretkey

---
apiVersion: v1
kind: Secret
metadata:
  name: mautic-credentials
  namespace: microservices
type: Opaque
data:
  admin-password: bWF1dGljYWRtaW4=  # mauticadmin